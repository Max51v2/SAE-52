<!-- 
    Auteur : Ishac HAMDANI
    Version : 0.2
-->


<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GMAO - Gestion des équipements</title>
    <link rel="icon" type="image/x-icon" href="/LogoVIM.png">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f0f0f0;
        }
        header {
            background-color: #333;
            color: #fff;
            padding: 1em;
            text-align: center;
            position: relative;
        }
        header a {
            position: absolute;
            top: 1em;
            right: 1em;
            text-decoration: none;
        }
        button {
            padding: 10px 20px;
            background-color: #007bff;
            color: #fff;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s, box-shadow 0.3s;
            display: inline-flex;
            align-items: center;
        }
        button:hover {
            background-color: #0056b3;
        }
        button:active {
            background-color: #004085;
        }
        button i {
            margin-right: 8px;
        }
        .container {
            max-width: 1000px;
            margin: 20px auto;
            padding: 20px;
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }
        h1, h2 {
            text-align: center;
        }
        form {
            display: flex;
            flex-direction: column;
        }
        label {
            margin: 10px 0 5px;
        }
        input[type="text"], input[type="number"], select {
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
            margin-bottom: 15px;
        }
        input[type="submit"], button {
            padding: 10px;
            background-color: #333;
            color: #fff;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            display: flex;
            align-items: center;
        }
        input[type="submit"]:hover, button:hover {
            background-color: #555;
        }
        .hidden {
            display: none;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        table, th, td {
            border: 1px solid #ccc;
        }
        th, td {
            padding: 10px;
            text-align: left;
        }
        th {
            background-color: #f2f2f2;
        }
        .icon-button {
            display: flex;
            align-items: center;
        }
        .icon-button i {
            margin-right: 8px;
        }
        .tabs {
            margin: 20px 0;
            display: flex;
            justify-content: space-evenly;
        }
        .tab-content {
            display: none;
        }
        .tab-content.active {
            display: block;
        }
        #trashCol {
            width: 10px;
        }
        #userListTab {
            padding-top: 50px;
        }
    </style>
</head>
<body>
    <header>
        <h1>GMAO - Gestion des équipements</h1>
        <a href="logout.html">
            <button type="button">
                <i class="fas fa-sign-out-alt"></i> Se déconnecter
            </button>
        </a>
    </header>
    <div class="container">
        <div class="tabs">
            <button class="tab-button" onclick="window.location.href='admin.html'">Gestion des Stocks</button>
            <button class="tab-button" onclick="window.location.href='manageuser.html'">Gestion des Rôles</button>
            <button class="tab-button" onclick="window.location.href='manageticket'">Gestion des Tickets</button>

        </div>
        <!-- Contenu des onglets -->
        <div id="stockManagement" class="tab-content">
            <h2>Ajouter un équipement</h2>
            <form id="stockForm">
                <label for="equipName">Nom de l'équipement:</label>
                <input type="text" id="equipName" name="equipName" required="">

                <label for="equipModel">Modèle:</label>
                <input type="text" id="equipModel" name="equipModel" required="">

                <label for="equipSerial">Numéro de série:</label>
                <input type="text" id="equipSerial" name="equipSerial" required="">

                <label for="equipVlan">VLAN:</label>
                <input type="number" id="equipVlan" name="equipVlan" required="">

                <input type="submit" value="Ajouter l&#39;équipement">
            </form>
        </div>

        <div id="ticketManagement" class="tab-content active">
            <h2>Gestion des Tickets</h2>
            <h3>Tickets en attente</h3>
            <table id="ticketTable">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Problème</th>
                        <th>Catégorie</th>
                        <th>Statut</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="ticketList">
                    <!-- Les tickets seront ajoutés ici par JavaScript -->
                </tbody>
            </table>
        </div>
    </div>

    <script>
        // Fonction pour ouvrir un onglet spécifique
        function openTab(tabId) {
            const contents = document.querySelectorAll('.tab-content');
            contents.forEach(content => content.classList.remove('active'));
            document.getElementById(tabId).classList.add('active');

            if (tabId === 'ticketManagement') {
                fetchTicketsForAdmin();
            }
        }
        // Ajouter un nouvel équipement dans la gestion des stocks
        document.getElementById('stockForm').addEventListener('submit', function(event) {
            event.preventDefault();

            const equipName = document.getElementById('equipName').value;
            const equipModel = document.getElementById('equipModel').value;
            const equipSerial = document.getElementById('equipSerial').value;
            const equipVlan = document.getElementById('equipVlan').value;

            // Vous pouvez envoyer ces données à votre API ici pour les enregistrer dans la base de données
            console.log({
                equipName,
                equipModel,
                equipSerial,
                equipVlan
            });

            alert('Équipement ajouté avec succès');
            // Réinitialiser le formulaire après ajout
            document.getElementById('stockForm').reset();
        });
    </script>

    <script>
        // Récupère les tickets auprès du Servlet
function getTickets() {
    fetch(`https://${ServerIP}:8443/SAE52/ListTicket`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ token: tokenGMAO, Test: false })
    })
    .then(response => response.json())
    .then(createTicketTable);
    
    // Remplir le tableau contenant les tickets
    function createTicketTable(response) {
        console.log(response);

        // Suppression du contenu actuel du tableau des tickets
        ticketList.innerHTML = '';

        let c = 0;

        // Remplissage du tableau avec les tickets
        while (c < response.length) {
            const description = response[c].description;
            const service = response[c].service;
            const status = response[c].status;
            const ticketId = response[c].id;
            const row = document.createElement('tr');
                
            row.innerHTML = `
                <td>${description}</td>
                <td>${service}</td>
                <td>${status}</td>
                <td style="text-align: center;"> <!-- Ajout de style de centrage à la cellule -->
                    <button 
                        style="background: url('trash.png') no-repeat center; 
                                background-size: contain; 
                                width: 25px; 
                                height: 25px; 
                                border: none; 
                                padding: 0; 
                                cursor: pointer;" 
                        onClick="delTicket('${ticketId}')">
                    </button>
                </td>
            `;
            ticketList.appendChild(row);
            
            c = c + 1;
        }
    }
}

// Supprimer Ticket
function delTicket(ticketId) {
    var str = "Êtes-vous sûr de vouloir supprimer ce ticket ?";

    // Demande de confirmation
    if (confirm(str)) {
        console.log("Suppression ticket : ", ticketId);

        // Suppression du ticket dans la base de données
        fetch(`https://${ServerIP}:8443/SAE52/DeleteTicket`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ token: tokenGMAO, ticketId: ticketId, Test: false })
        })
        .then(response => response.json())
        .then(CheckTicketDeletion);

        // Vérification de la suppression du ticket
        function CheckTicketDeletion(response) {
            if (response.result === "Ticket doesn't exist") {
                alert("Le ticket n'existe pas.");
            } else {
                // Actualisation du tableau des tickets
                getTickets();
            }
        }
    }
}

    </script>

<script>
    //Auteurs JS : Maxime VALLET, Ishac HAMDANI, Valentin MILLOT
    //Version : 0.5


    //Refresh la page quand on reviens en arrière sinon le script ne tourne pas (à inclure dans toutes les pages)
    window.onunload = function(){reload()};

    // Adresse IP des serveurs (vu que l'adresse du serveur change et que les deux serveurs on la mm adresse, on récupere celle entrée pour acceder au serv Apache)
    // à utiliser lorsqu'il faut accéder au serveur Tomcat !!!
    const currentUrl = window.location.href;
    const url = new URL(currentUrl);
    const ServerIP = url.hostname;


    //Données session
    var tokenGMAO = sessionStorage['tokenGMAO'];
    let userLogin = sessionStorage['userLogin'];
    let userRole = sessionStorage['userRole'];

    if(typeof tokenGMAO !== 'undefined'){
        console.log("token : "+tokenGMAO)
        console.log("###### informatif !!! ######")
        console.log("login : "+userLogin)
        console.log("droits : "+userRole)
        console.log("############################")

        //Vérification du token
        fetch("https://"+ServerIP+":8443/SAE52/TokenCheck", {method: "POST", headers: {"Content-Type": "application/json"}, body: JSON.stringify({ token: tokenGMAO, Test: false})}).then(r => r.json()).then(TokenCheck)
    }
    else{
        console.log("no token")

        window.location.href = 'login.html'; // Redirection vers la page login si pas de token
    }

    function TokenCheck(r){
        //JSON obtenu
        console.log(r)

        //redirection selon les droits
        if(r["droits"] === 'Admin'){
            //Rien
        }
        else if(r["droits"] === 'Technicien'){
            window.location.href = 'tech.html'; // Redirection vers la page principale pour le technicien
        }
        else if(r["droits"] === 'Utilisateur'){
            window.location.href = 'secretaire.html'; // Redirection vers la page principale pour l'utilisateur
        }
        //si aucun droit
        else{
            window.location.href = 'login.html'; // Redirection vers la page login si mauvais token
        } 
    }

    
    // Gérer les onglets
    function openTab(tabName) {
        var tabContent = document.getElementsByClassName("tab-content");
        for (var i = 0; i < tabContent.length; i++) {
            tabContent[i].classList.remove("active");
        }
        document.getElementById(tabName).classList.add("active");
    }
    </script>

       <script>
        // Auteur JS : HAMDANI Ishac
        // Version : 1.6
    
        // Refresh la page quand on revient en arrière sinon le script ne tourne pas
        window.onunload = function(){reload()};
    
        // Adresse IP des serveurs (vu que l'adresse du serveur change et que les deux serveurs ont la même adresse, on récupère celle entrée pour accéder au serveur Apache)
        // à utiliser lorsqu'il faut accéder au serveur Tomcat !!!
        const currentUrl = window.location.href;
        const url = new URL(currentUrl);
        const ServerIP = url.hostname;
    
        // Données session
        var tokenGMAO = sessionStorage['tokenGMAO'];
        let userLogin = sessionStorage['userLogin'];
        let userRole = sessionStorage['userRole'];
    
        if(typeof tokenGMAO !== 'undefined'){
            console.log("token : "+tokenGMAO)
            console.log("###### informatif !!! ######")
            console.log("login : "+userLogin)
            console.log("droits : "+userRole)
            console.log("############################")
    
            // Vérification du token
            fetch("https://"+ServerIP+":8443/SAE52/TokenCheck", {method: "POST", headers: {"Content-Type": "application/json"}, body: JSON.stringify({ token: tokenGMAO, Test: false})})
            .then(r => r.json())
            .then(TokenCheck)
        }
        else{
            console.log("no token")
            // Redirection vers la page login si pas de token
            window.location.href = 'login.html';
        }
    
        // Vérification du token
        function TokenCheck(r){
            // JSON obtenu
            console.log(r)
    
            // Redirection selon les droits
            if(r["droits"] === 'Admin'){
                // Affichage des tickets si droits admin
                ShowData();
            }
            else if(r["droits"] === 'Technicien' || r["droits"] === 'Utilisateur'){
                // Redirection vers la page principale pour le technicien
                window.location.href = 'secretaire.html';
            }
            else{
                // Redirection vers la page login si mauvais token ou pas de droits
                window.location.href = 'login.html';
            } 
        }
    
        // Affichage des tickets pour l'admin
        function ShowData(){
            const button =  document.getElementById('submitButton');
            const ticketList = document.getElementById('ticketList');
    
            // Récupération des tickets
            getTickets();
    
            // Ajout ticket
            button.addEventListener('click', function (e) {
                e.preventDefault();
    
                // Variables formulaire
                const description= document.getElementById('description').value;
                const service = document.getElementById('service').value;
                const status = document.getElementById('status').value;
    
                // Ajout ticket dans la BD
                fetch(`https://${ServerIP}:8443/SAE52/AddTicket`, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ description: description, service: service, status: status, token:tokenGMAO, Test: false })
                })
                .then(response => response.json())
                .then(CheckAddition);
    
                function CheckAddition(response){
                    // Reset formulaire
                    userForm.reset();
    
                    if(response.result === "Login exist"){
                        alert("Le login existe déjà");
                    }
                    else{
                        // Rafraichissement du tableau des tickets
                        getTickets();
                    }
                }
            });
        }
    
        // Récupère les tickets auprès du Servlet
        function getTickets(){
            fetch(`https://${ServerIP}:8443/SAE52/ListTicket`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ token:tokenGMAO, Test: false })
            })
            .then(response => response.json())
            .then(createTicketTable);
        }
    
        // Remplir le tableau contenant les tickets
        function createTicketTable(response){
            console.log(response)
    
            // Suppression du contenu du tableau
            ticketList.innerHTML = '';
    
            c = 0;
    
            // Remplissage du tableau avec les informations des tickets
            while(c < response.length){
                const description = response[c].description;
                const service = response[c].service;
                const status = response[c].status;
                const row = document.createElement('tr');
                    
                row.innerHTML = `
                    <td>${description}</td>
                    <td>${service}</td>
                    <td>${status}</td>
                    <td style="text-align: center;"> <!-- Ajout de style de centrage à la cellule -->
                        <button 
                            style="background: url('trash.png') no-repeat center; 
                                    background-size: contain; 
                                    width: 25px; 
                                    height: 25px; 
                                    border: none; 
                                    padding: 0; 
                                    cursor: pointer;" 
                            onClick="delTicket('${response[c].id}')">
                        </button>
                    </td>
                `;
                ticketList.appendChild(row);
    
                c = c + 1;
            }
        }
    
        // Suppression du ticket
        function delTicket(ticketId){
            var str = "Êtes-vous sûr de vouloir supprimer ce ticket ?";
    
            // Demande de confirmation
            if (confirm(str)) {
                console.log("suppression du ticket : ", ticketId);
    
                // Suppression ticket dans la BD
                fetch(`https://${ServerIP}:8443/SAE52/DeleteTicket`, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ token: tokenGMAO, ticketId: ticketId, Test: false })
                })
                .then(response => response.json())
                .then(CheckDeletion);
    
                function CheckDeletion(response){
                    if(response.result === "Ticket doesn't exist"){
                        alert("Le ticket n'existe pas");
                    }                            
                    else{
                        // Actualisation du tableau des tickets
                        getTickets();
                    }
                }
            }
        }
    </script>
</body>
</html>    